Debugging with pydev & robot, follow below link
--------------------------------------------------------
http://nokia.github.io/RED/help/user_guide/launching/debug/robot_python_debug.html

Download Eclipse IDE from this link which has support for RED editor : https://www.eclipse.org/downloads/packages/release/2020-03/r
Eclipse 2020-03 is compatible with RED latest version only, so don't download latest version of eclipse otherwise you wont be able to install RED in eclipse.


Must read this whole page, read each and evrry link here :
-----------------------------------------------------------------
-> https://nokia.github.io/RED/help/user_guide/user_guide.html

-> first open workspace, then choose project from file systems 
-> Window -> Prespective -> Open prespective-> Robot -> Open click, it will open robot prespective in eclipse
-> Right click project(PicassoUI), Robot framework -> Add robot nature
-> It will add a default folder Robot Standard libraries and also create red.xml file
-> Double click red.xml file, and navigate to libraries tab -> PyhtonPath(right pane) -> Add these below path line by line : and then save red.xml file

PicassoUI/resources/components
PicassoUI/resources/keywords
PicassoUI/resources/variables
PicassoUI/suites

-> Also add libraries like SelenkumLibrary, \\lib\\Custome_keyword.py in Path left pane..save red.xml file
-> Add SeleniumLibrary from this location C:\Python37\Lib\site-packages\SeleniumLibrary\__init__.py file
-> Add SSHLibrary to red.xml file

After adding above libraries , save red.xml file

-> Open code : wherever error appears: ctrl + 1 -> add that library to red.xml

-> Go to window -> preferences -> Robot Framework -> Errors/Warnings -> Click on checkbox Turn Off validation (Not recommended)


-. Next step : to create a debugging configuration with python and robot please follow below steps :
-> Click on File -> New -> Other -> RobotFramework -> RED with PyDev debugging session -> Next -> Next -> Finish -> It will navigate to robot configuration

Now Additional robot framework arguments, add this below line :
-> -d result_reports --pythonpath  resources/keywords --pythonpath resources/variables --pythonpath resources/components --pythonpath scripts

-> go to environment tab in same debug configuration opened window -> add environment variable as : Name: YMLFILE , value : nso_config.yaml


Important thing here : before we start debugging our robot tests..we need to set the nso_config.yaml file as project level environment variable, so to do this you need to do below things :

-> In Debug Configuration -> Executor tab -> External script section -> Add this line there (C:\Jaynath_Automation\sfnas\tests\framework\PicassoUI\setup_env.bat) -> Additonal executable file arguments section -> add (nso_config.yaml)

before you run any test, make sure pydev debugger is running -> you can enable this by going to -> windows -> preferences -> PyDev -> Debug -> Remote Debugger server activation -> Keep always on (restart when terminated)

Run the tests with this configuration once, so that YMLFILE envrionment variable would be set, next time when you run tests, then remove those values from there and add below values in those section :

-> -m redpydevd --pydevd C:\Users\jaynath.kumar\eclipse\java-2020-06\eclipse\..\..\..\.p2\pool\plugins\org.python.pydev.core_7.6.0.202006041357\pysrc\pydevd.py

-> C:\Python27\python.exe



-> To debug python and robot code together, when you want to step into python code from robot file then first time it will ask you "click here to try opening source of this file"
Note
: if you don't want to see this page you can configure debugger in Preferences so that it will never suspend inside library keywords when stepping.

Set the preferences  -> Suspend execution whenever debugger goes into erroneous state.


-> Open robot debug shell, it will also be having python expressions icon to evaluate , go to -> window -> show view -> Robot -> Debug Shell


***Please follow this link for pydev & robot debugging :
**********************************************************
http://nokia.github.io/RED/help/user_guide/launching/debug/robot_python_debug.html

Download RED editor from this link below :
**********************************************
-> https://github.com/nokia/red

You can directly download red editor from this location, which is built on top of Eclipse

To learn about how to create robot project and other stuff you can find information in this below link :

-> https://nokia.github.io/RED/help/


Second way :

Download eclpise and install plugin red & pydev from eclipse marketplace : eclipse -> help -> marketplace

**important : When you want to install or view anything in the eclipse marketplace thne make sure to disconnect from veritas VPN first, just disconnect from pulsecure vpn app
otherwise you will get error and eclipse marketplace will not load properly


******************************************************************************************************************************************************************************
Overview of red.xml file : https://nokia.github.io/RED/help/user_guide/project_config/red_xml_overview.html
*****************************************************************************************************************************************************************

** The red.xml is a file which stores project related setting - some of those controls editing phase (validation, code assistance etc.) while the other can influence RobotFramework execution.
It is always located in project root directory.

Creating/recreating red.xml
----------------------------------
1. The red.xml file is automatically created when Robot project is created (e.g. by using File -> New -> Robot Project action).
2. In case you're importing Robot files to generic Eclipse project you need to make the project Robot-specific by selecting Robot Framework -> Add Robot nature action from context menu of the project.

In any case red.xml file shall be visible in Project Explorer in root folder.


Table preferences : go to this location : Window -> Preferences -> Robot Framework -> Editor
---------------------
All table related preferences (cell text folding, number of columns, default behaviors) can be configured at Window -> Preferences -> Robot Framework -> Editor in Tables section.



RED Preferences & red.xml and other :
**************************************

Editor preferences are stored together with other Eclipse settings, all of them are shared across active workspace.
Preferences can be found in toolbar menu Window -> Preferences -> Robot Framework.
One of the most important item in multiple python environment is setting active Python and RobotFramework instances to be used for running and debugging.
If you need to use different Pythons & Robots in various projects, this can be done editing red.xml in respective project
***************************************************************************************************************************************************************

Step 1: Open existing project in red or eclipse, and then right click that project: -> add robot nature
Step 2: Once you perform step1, it will automatically generate a red.xml file under project (for example : PicassoUI)
Step 3: Double click red.xml file, and add Selenium2Library, PicassoUI\\lib\\custome_keyword.py, ...



Eclipse RED helpful notes :
-------------------------------

Key shortcuts in editors :
****************************
1. Ctrl+1 : Quick Fix allows to perform predefined actions for common problems. It can be activated on item only when light bulb icon is present next to line number.

2. Ctrl+Space : Code assistance provides Robot Framework test items assist. Cycle through modes with CTRL+SPACE. Working modes are customizable in Preferences.

3. Ctrl+/ : Block comment sets multi-line comments on the selected text in Source editor.

4. Ctrl+Shift+F	: Automatic source formatting applies simple source code reformat in Source editor.

5. F3 : CTRL+LeftMouseButton	- Jumps to keyword definition selected by cursor or mouse.


*********************************************************************************************************************************

Preferences in red.xml :
-------------------------------

Red.xml file is place with Project respective preferences, it is not shared with other projects. It is always created during project creation process in RED.

It provides information about external libraries and variables used in Project so RED can generate libraries documentation used in content assistance and validation.

If RED Robot Editor does not provide you content help or validation suggests that library is not visible, it is good to have a look into red.xml When library is included in red.xml, documentation is automatic generated by RED


Predefined variables
*************************

The Python extension settings support predefined variables. Similar to the general VS Code settings, variables use the ${variableName} syntax. Specifically, the extension supports the following variables:

${cwd} - the task runner's current working directory on startup

${workspaceFolder} - the path of the folder opened in VS Code

${workspaceRootFolderName} - the name of the folder opened in VS Code without any slashes (/)

${workspaceFolderBasename} - the name of the folder opened in VS Code without any slashes (/)

${file} - the current opened file

${relativeFile} - the current opened file relative to workspaceFolder

${relativeFileDirname} - the current opened file's dirname relative to workspaceFolder

${fileBasename} - the current opened file's basename

${fileBasenameNoExtension} - the current opened file's basename with no file extension

${fileDirname} - the current opened file's dirname

${fileExtname} - the current opened file's extension

${lineNumber} - the current selected line number in the active file

${selectedText} - the current selected text in the active file

${execPath} - the path to the running VS Code executable



VS Code Configuration :
*************************************

//launch.json file present on remote machine on this location : (./vscode/lanch.json)


{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "cwd": "/",
            "program": "${file}",
            "args":["-V", "-j",  "1", "-tc",  "/vxctf/core/testcases/snas/storage/fs/Fscreate001.py"],	# change the test case name
            "console": "integratedTerminal"
        }
    ]
}


settings.json file present in (./vscode/settings.json) file


{
    "python.pythonPath": "usr/bin/python",
    "python.languageServer": "Jedi",
    "python.jediEnabled": true,
    "python.autoComplete.extraPaths": [
        "/vxctf/core/bin",
        "/vxctf/core/lib",
        "/vxctf/core/testcases",
        "/vxctf/core/scripts"
        
    ],
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    // "python.analysis.disabled": [
    //     "unresolved-import"
    // ],
    // "python.linting.pylintArgs": [
    //     "--load-plugin",
    //     "pylint_protobuf"
    // ],
    // "editor.formatOnSave": true,
    // "python.linting.pylintArgs": [
    //     "--init-hook",
    //     "import sys; sys.path.append('vxctf/core/bin, vxctf/core/lib, vxctf/core/testcases, vxctf/core/scripts')"
    // ]
}




**** Debugging in Python ******

Debugging the code in Python is a bit tricky when compared to other programming languages. Most of us use print statements in the code at multiple places to print the variable values and 
figure out the problem. Or sometimes use time.sleep() statements to pause the python program to check what’s going on in the code.
Recently we started tracing our code using pytest with Python Debugger(pdb)


i) Enter into PDB prompt at the start of each test using –trace option

pytest --trace test_example_form.py

ii) Enter into PDB prompt on failures. This will invoke the Python debugger on every failure.

pytest --pdb test_example_form.py


There are several commands you can execute in the pdb prompt for debugging your code like monitoring the variables, setting breakpoints, executing code line by line, step into a function, etc., Below are few commands we have used. We will have a detailed look at all these commands in the coming sections

n(next) – step to the next line within the same function
s(step) – step to the next line in this function or called function
b(break) – set up new breakpoints without changing the code
p(print) – evaluate and print the value of an expression
c(continue) – continue execution and only stop when a breakpoint is encountered
unt(until) – continue execution until the line with a number greater than the current one is reached
r (return) - If you want to exit out of the called function and resume the steps you can use ‘r’ command from the pdb prompt.
q(quit) – quit the debugger/execution



Command	Short form	What it does
args	a	Print the argument list of the current function
break	b	Creates a breakpoint (requires parameters) in the program execution
continue	c or cont	Continues program execution
help	h	Provides list of commands or help for a specified command
jump	j	Set the next line to be executed, ex : j <line number>
list	l	Print the source code around the current line
next	n	Continue execution until the next line in the current function is reached or returns
step	s	Execute the current line, stopping at first possible occasion
pp	pp	Pretty-prints the value of the expression
quit or exit	q	Aborts the program
return	r	Continue execution until the current function returns, It will simply move the cursor to end of return statement in a function. it is similar to step out from a function



*********************************************************************************************************************************************************************************************
Setting up new breakpoints without changing the code
You can use ‘b(reak)’ command to set a breakpoint without having to change your code. You can pass the Line number argument or function argument as shown below.

b(reak) [[filename:]lineno | function[, condition]]
Line number argument without a filename prefix will set a breakpoint in the current file. If the line numbers argument is prefixed with a filename then a breakpoint will be set in the file specified( the file will be searched in sys.path). We will now see how it works with the line numbers option. In the below example, we are setting three breakpoints at different line numbers. We did not specify any filename here, so the breakpoint is set in the current file. Each breakpoint is assigned a number.


Setting breakpoints using line numbers
Below are few options used with b(reak)

i) List all breakpoints


List all breakpoints
ii) Enable and Disable breakpoints

->enable breakpoint number
-> disable breakpoint number

Enable and Disable breakpoints
iii) Delete a breakpoint in the code
-> cl breakpoint number

Delete a breakpoint
This post covers a few basic and essential commands. There are many other commands that can be used in pdb python debugger. You can refer this link for pdb documentation.
