List comprehension : is a technique of implementing nested for loop in single line and it returns  list or tuple or set as per statistics, it is 33 % more faster and efficient than traditional for loop approach:

syntax of list comprehension with if condition :
-------------------------------------------------
[expression for item in list if condition == True]

syntax of dictionary comprehension with if and else condition
-------------------------------------------------------------------
[expression1 if condition == True else expression2 for item in list ]

Examples :

even_odd_list = ["Even" if i % 2 == 0 else "Odd" for i in numbers]

square_of_even_numbers = [item*item for item in range(1, 20) if item % 2 == 0]
square_cube_numbers = [item**2 if item % 2 == 0 else item**3 for item in range(1, 20)]

List Comprehension with String :
-------------------------------------
=> find vowels char from word python
word = "Python"
vowels = "aeiou"
output = ''.join([char for char in word if char in vowels])

=> above are all single dimensional list comprehension examples, we can also have nested or 2 dimensional list comprehensions :

2 dimesnions or nested loops list comprehensions :
------------------------------------
Let's write code to compute a multiplication table.

[[i * j for j in range(1, 6)] for i in range(2, 5)]

for i in range(2, 5):
  row = list()
  for j in range(1, 6):
    row.append(i*j)

examples :
=> to compute squares of element for even and cube of element for odd numbers 
mylist = [[10,15],[20,25], [30,35]]
out = [[j*j if j %2 ==0 else j*j*j for j in i] for i in mylist]

Nested if With List Comprehension
# find even numbers that are divisible by 5
num_list = [y for y in range(100) if y % 2 == 0 if y % 5 == 0]

Dictionary Comprehensions :
****************************
Like List Comprehension, Python allows dictionary comprehensions. We can create dictionaries using simple expressions. A dictionary comprehension takes the form {key: value for (key, value) in iterable}

Dictionary comprehension in Python is a concise way to create dictionaries. It allows you to generate a dictionary from an iterable in a single line of code using a similar syntax to list comprehensions.

newdict = {x: x**3 for x in range(10) if x**3 % 4 == 0}
# find charatcter and their count from a string
str = 'abcdabcfeadgb'
char_count_dict = {char:str.count(char) for char in str}
print(char_count_dict)



range and xrange : difference

range returns list but xrange returns objects

in terms of memory management xrange does it efficiently.

range(start,stop,step)

Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is 
slightly faster than range() and more memory efficient.


in python 3, we have only range function, xrange is replaced by range function. it does the same work done by xrange

Function :

1. Built-in function
2. UDF
3. Object/ Class functions
4. Module function

Decorator :
-> In pyhton decorators are wrapper around another function
-> if you want to change/modify the functionality of existing function without changing the original function, then decorators are very helpful.
* Decorators are simply wrapper around another function, which changes the behavior of exisitng function.
* Basically decorator takes in a function, add some functionality and returns it

**function of functions
decorator is a special concept in python, which helps to implement top level functions, which helps to add more instructions
to the exisitng fucntions

example of decorator :

def smart_divide(func):
  def _inner(a, b):
    if a < b and a != 0:
      a, b = b, a
    print 'output is :'
    func(a, b)
  return _inner

@smart_divide
def divide(a, b):
  print a / b

if __name__ == '__main__':
  divide(10, 30)	# output will be always larger(a,b)/minimum(a,b)


Lambda functions:

-> is an anonymous(which does not have any name) user defind functions which normally use when we want to pass function object as an argument to function.

->it is a simple one line function, 
-> donot use def or return keyword
->These are implicit

lambda x,y:x if x>y else y  (to get max of two numbers)

map function:
-> Apply same function to each element of a sequence
-> Return the modified list

map(lambda x:x**3,(10,20,30,15)) , 2nd argument should be iterable object

map(lambda x:x**3,range(1,11))

filter function:
filter function returns those elements of iterable object for which function is true
for ex : filter(lambda x: x%2==0, [10, 13, 11, 23, 40, 24])	# output : [10, 40, 24]

-> Filter function returns out of a sequence
-> return filtered list

filter(map(lambda x: x**2, [10,20,30]))
def cube(x):
	return x ** 3

map(cube,range(1,11))

Filter function :

filter(...)
    filter(function or None, sequence) -> list, tuple, or string
    
    Return those items of sequence for which function(item) is true.  If
    function is None, return the items that are true.  If sequence is a tuple
    or string, return the same type, else return a list.


** Filter even number from list and get square of those elements

>>> l = [10,13,20,17,21,24]
>>> list(map(lambda y:y*y,filter(lambda x:x%2==0,l)))
[100, 400, 576]

2nd Way :

>>> z = [item*item for item in l if item%2==0]
>>> z
[100, 400, 576]
>>> 

Reduce function :

The reduce function is little less obvious in it's intent.This function reduces a list to a single
value by combining elements via a supplied function.

-> Reduce function is really useful function for performing some computation on a list and returning
the result.
reduce is a really useful function for performing some computation on a list and returning the 
result. It applies a rolling computation to sequential pairs of values in a list. 
For example, if you wanted to compute the product of a list of integers.
>>> product = reduce((lambda x, y: x * y), [1, 2, 3, 4])
>>> product
24
>>> product = reduce((lambda x, y: x + y), [1, 2, 3, 4])
>>> product
10


Comprehension:

is a technique in python for utilizing the nested loops within a single line and produce a list or dictionary or set as per the statistics , comprehension is
33 % faster as compare to normal loops.


list dictionary or set comprehension

List comprehension :


a= [i for i in range(1,10)]	list comprehension single dimension

[i for i in range(1,10) if i % 2 ==1]	

2-dimensional list comprehension
************************************

[j for i in [[1,2,3],[4,5,6]] for j in i]

[j for i in "" for j in i if j%2==1]


To check prime and non prime using list comprehension :

notaprime : notaprime = [j for i in range(2,10) for j in range(i*2,100,i)]

prime : [i for in range(2,100) if i not in notaprime]



Enumerate function : returns index, value pair from a list

x = [10, 20, 30, 40]
for i,j in enumerate(x):
  print i, j

gives index and value pair of list or dictionary.

for i,j in enumerate(names):
	print i,j

{i:j for i,j in enumerate(names)}



Zip function : Return a list of tuples, where each tuple contains the i-th element
    from each of the argument sequences.  The returned list is truncated
    in length to the length of the shortest argument sequence

dept =['IT','HR','Admin']
names=['Jatin','Raj','Mohan']

zip(names,dept)

