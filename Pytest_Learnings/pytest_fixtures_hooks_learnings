"""
Pytest learnings Doc : https://docs.pytest.org/en/stable/how-to/fixtures.html

=> Pytest is a testing framework for Python that makes it easy to write simple and scalable test cases. 
It offers features like fixtures, parameterized tests, and detailed error reporting. With Pytest, you can efficiently test 
your code and ensure its reliability.
=> Pytest helps you write and manage tests for your Python code more effectively. 

Pytest features :
******************************
1. Fixtures : Provides a powerful fixture mechanism to set up and tear down resources needed for tests, promoting code reuse and reducing duplication.
2. Parameterizr tests/fixtures : Supports parameterized tests, allowing you to run the same test with different inputs efficiently.
3. Automatic Test disovery - Automatic test discovery mechansim allows tests to be discovered automatically named with the test_ prefix without extra setup.
    =>  Pytest finds and runs tests without explicit configuration, just by following naming conventions like test_*.py
4. Assertions - Provides assertion statement to validate the expected and actual result of tests/steps
5. pytest configuration file (pytest.ini) - pytest supports configuration to be defined separately in pytest.ini file
    => or similar pytest supported configuration files (pytest.ini, pyproject.toml, tox.ini, setup.config)
5. Detailed Reporting - Provides reporting features through pytest0html plugins and also support third party reporting pluins like Allure, reportportal
6. Extensive plugins support - It has wide range of pytest related plugins support availabe for different purposes
7. Assertion exception : you can raise exception when pytest assertion fails 
"""
=> conftest file => Present in root directory of automation folder structure, or also it may reside in tests directory
=> Conftest (confifuration test file) - is a special file in pyest, which allows user to write pytest fxitures, hooks and make call
to plugins inside this. anything written inside this file would be automatically available to test modules without injecting this conftest 
file in test modules. we don't need to import fixtures in conftest file into test modules explicitly as they would be auto available
in the test modules, this is called as dependecny injection.


Pytest fixtures :
*****************************

Pytest fixtures are a powerful feature that allows you to set up and tear down resources needed for your tests. 
They help in creating reusable and maintainable test code by providing a way to define and manage the setup and teardown logic. 
A Fixture is a piece of code that runs and returns output before the execution of each test.


@pytest.fixture(scope='session/function/class/module/package', autouse='True', params=['ie', 'chrome', 'firefox'])
def my_setup_teardown_fixture(request):
    browser = request.param
    # write setup code
    # setup code block
    ###teardown code call below, we can make call using yield or by using request.addfinalizer function
    yield None  
    request.addfinalizer(finalizer_function)


=> We can make call to teardown code in fixture in 2 ways, one way is using yield statement which is genrator concept, which 
pauses the execution at yield statement point and transfer the control to calling function which is testcase, and once testcase
execution is completed then it will again make call to teardown code below yield statement.

=> another way of calling finalizer function is by passing request object to fixture function and then using request.addfinalizer function
pass the finalizer function object inside request.addfinalizer(fin)

=> Difference between making teardown code call using yeild and addfinalizer function :
In case of yield statement, when there is a failure or exception in the setup part of code in fixture, then teardown code won't be called.
but in case of addfinalizer function, even if setup code raises failure or exception, tearown code would be called. This would be
beneficial in certain cases where we want to do forcefully resource cleanup or release resources acqyuired by setup code.

=> Notes : If multiple fixtures are called inside test function, then setup code of fixtures would be called in sequential order
but teardown code would be called in the last in first out order.

=> Fixtures can request other fixtures :
One of pytest’s greatest strengths is its extremely flexible fixture system. 
It allows us to boil down complex requirements for tests into more simple and organized functions, where we only need to have each one describe the things they are dependent on. 
That means in case of multiple fixtures call inside testcases, teadown would be called from right to left fixtures, but setup would be
called from lef to right fixtures.

##=> Parameterizing fixtures :

@pytest.fixture(scope="module", params=["smtp.gmail.com", "mail.python.org"])
def smtp_connection(request):
    smtp_connection = smtplib.SMTP(request.param, 587, timeout=5)
    yield smtp_connection
    print(f"finalizing {smtp_connection}")
    smtp_connection.close()

## Override a fixture with direct test parametrization

tests/
    conftest.py
        # content of tests/conftest.py
        import pytest

        @pytest.fixture
        def username():
            return 'username'

        @pytest.fixture
        def other_username(username):
            return 'other-' + username

    test_something.py
        # content of tests/test_something.py
        import pytest

        @pytest.mark.parametrize('username', ['directly-overridden-username'])
        def test_username(username):
            assert username == 'directly-overridden-username'

        @pytest.mark.parametrize('username', ['directly-overridden-username-other'])
        def test_username_other(other_username):
            assert other_username == 'other-directly-overridden-username-other'

###How to mark test functions with attributes :

By using the pytest.mark helper you can easily set metadata on your test functions.

usefixtures - use fixtures on a test function or class

filterwarnings - filter certain warnings of a test function

skip - always skip a test function

skipif - skip a test function if a certain condition is met

xfail - produce an “expected failure” outcome if a certain condition is met

parametrize - perform multiple calls to the same test function.

Registering marks
You can register custom marks in your pytest.ini file like this:

[pytest]
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    serial

=> Alternatively, you can register new markers programmatically in a pytest_configure hook:
def pytest_configure(config):
    config.addinivalue_line(
        "markers", "env(name): mark test to run only on named environment"
    )
=> Raising errors on unknown marks :
When the --strict-markers command-line flag is passed, any unknown marks applied with the @pytest.mark.name_of_the_mark decorator will trigger an error. 
You can enforce this validation in your project by adding --strict-markers to addopts:
[pytest]
addopts = --strict-markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    serial


Basic examples fixtures :
from uuid import uuid4
from urllib.parse import urljoin

from selenium.webdriver import Chrome
import pytest

from src.utils.pages import LoginPage, LandingPage
from src.utils import AdminApiClient
from src.utils.data_types import User


@pytest.fixture
def admin_client(base_url, admin_credentials):
    return AdminApiClient(base_url, **admin_credentials)


@pytest.fixture
def user(admin_client):
    _user = User(name="Susan", username=f"testuser-{uuid4()}", password="P4$$word")
    admin_client.create_user(_user)
    yield _user
    admin_client.delete_user(_user)


@pytest.fixture
def driver():
    _driver = Chrome()
    yield _driver
    _driver.quit()


@pytest.fixture
def login(driver, base_url, user):
    driver.get(urljoin(base_url, "/login"))
    page = LoginPage(driver)
    page.login(user)


@pytest.fixture
def landing_page(driver, login):
    return LandingPage(driver)


def test_name_on_landing_page_after_login(landing_page, user):
    assert landing_page.header == f"Welcome, {user.name}!"

import pytest


# Arrange
@pytest.fixture
def first_entry():
    return "a"


# Arrange
@pytest.fixture
def order(first_entry):
    return [first_entry]


def test_string(order):
    # Act
    order.append("b")

    # Assert
    assert order == ["a", "b"]

A test/fixture can request more than one fixture at a time


PyTest Assertions and Exceptions:
****************************************
=>******* Assertions about expected exceptions :

def test_zero_division():
    with pytest.raises(ZeroDivisionError):
        1 / 0

def test_recursion_depth():
    with pytest.raises(RuntimeError) as excinfo:

        def f():
            f()

        f()
    assert "maximum recursion" in str(excinfo.value)
excinfo is an ExceptionInfo instance, which is a wrapper around the actual exception raised. The main attributes of interest are .type, .value and .traceback.

## Matching exception messages :
def test_match():
    with pytest.raises(ValueError, match=r".* 123 .*"):
        myfunc()

## 
def test_exception_in_group():
    with pytest.raises(ExceptionGroup) as excinfo:
        raise ExceptionGroup(
            "Group message",
            [
                RuntimeError("Exception 123 raised"),
            ],
        )
    assert excinfo.group_contains(RuntimeError, match=r".* 123 .*")
    assert not excinfo.group_contains(TypeError)

PyTest Hooks :
******************

## pytest hooks : Learn more about hooks from this page : https://pytest-with-eric.com/hooks/pytest-hooks/

=> Pytest Hooks are gateway points, allowing you to inject logic at specific stages of the test execution process to modify or extend the behaviour of tests based on test events.

Pytest offers a variety of hooks, each designed for different purposes and stages of the test cycle. 

=> Some well defined hooks in pyest conftest file

1. def pytest_addoption(parser)

=> Occasionally, it is necessary to change the way in which command line options are defined by one plugin based on hooks in another plugin.


def pytest_addoption(parser, pluginmanager):
    default_value = pluginmanager.hook.pytest_config_file_default_value()
    parser.addoption(
        "--config-file",
        help="Config file to use, defaults to %(default)s",
        default=default_value,
    )


def pytest_runtest_makereport()

def pytest_sessionstart()

def pytest_sessionfinish()

def pytest_configure()





##> How to run pytest testcases :
******************************************
-> Pytest supports several ways to run and select tests from the command-line or from a file :
1. Run tests in a module :                      pytest test_mod.py
2. Run tests in a directory :                   pytest testing/
3. Run tests by keyword expressions :           pytest -k 'My Class and Not method'
4. To run a specific test within a module:      pytest tests/test_mod.py::test_func
5. To run all tests in a class:                 pytest tests/test_mod.py::TestClass
6. To run a specific test case within class     pytest tests/test_mod.py::TestClass::test_method
7. Specifying a specific parametrization of a test:  pytest tests/test_mod.py::test_func[x1,y2]
8. To run tests by marker : 
To run all tests which are decorated with the annotated @pytest.mark.slow(phase=1) decorator, with the phase keyword argument set to 1 :
=> pytest -m "slow(phase=1)"

=> Read argument from a file and then run : pytest @tests_to_run.txt
=> 
##### ******* How to re-run failed tests and maintain state between test runs :

--lf, --last-failed - to only re-run the failures.
--ff, --failed-first - to run the failures first and then the rest of the tests.

How to handle test failures :
pytest -x           # stop after first failure
pytest --maxfail=2  # stop after two failures






pytest.ini file : Generally we place pytest.ini file at the root of the repo here.
*************************
-> Config files help you define how you want each program or unit test to behave on execution.

=> So how do you specify config in Pytest?
=> pytest.ini is a configuration file in pytest, usin this ini file we can set up console logs format, timeout, 
environment variables, test paths, custom markers, minimum versions and others.

Logging :
--------------
[pytest]  
log_cli=true  
log_level=DEBUG  
log_format = %(asctime)s %(levelname)s %(message)s  
log_date_format = %Y-%m-%d %H:%M:%S

Output Console Logs To Log File :
***************************************
[pytest]  
log_file = logs/pytest-logs.txt

Specify Timeouts :
**************************
[pytest]  
timeout=5

Define Environment Variables
**********************************
[pytest]  
env =  
    ENVIRONMENT=dev  
    ACCOUNT=12345

Specify minimum version for pytest : (You can specify that we need pytest==7.2 and actually installed pytest==7.1.3)
************************************************************************************************************************8
[pytest]  
minversion = 7.2

Set Required Plugins :
*************************
[pytest]  
required_plugins = pytest-xdist>=3.2.0 pytest-env<=0.8.0

Use Custom Markers :
**************************
[pytest]  
addopts = --strict-markers  
markers =  
    core: marks tests as core (deselect with '-m "not core"')  
    serial

Setting prefix for python class, modules, functions for test discovery :
*******************************************************************************
[pytest]
python_files = test_*.py
python_classes = Test
python_functions = test_*
norecursedirs = _build __pycache__
addopts = -ra -v

Sample configuration pytest.ini file :
**********************************************

[pytest]
minversion = 7.2
python_files = test_*.py
python_classes = Test
python_functions = test_*
log_file = logs/pytest-logs.txt
norecursedirs = _build __pycache__
addopts = -ra -v
required_plugins = pytest-xdist>=3.2.0 pytest-env<=0.8.0
timeout = 5
env =  
    ENVIRONMENT=dev  
    ACCOUNT=12345             
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s %(levelname)s %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_format = %(asctime)s %(levelname)s %(message)s
log_date_format = %Y-%m-%d %H:%M:%S
markers =
    smoke: require to be run for smoke test
    small: tests last less than 1 minute
    medium: tests last 1-3 minutes
    large: tests last more than 3 minutes
filterwarnings =
    ignore:.*Call to deprecated function .*(fields|_options|_valid_input_keys|validator_functions).*:DeprecationWarning
    ignore:^Could not append AuthInteractivePassword, not allowed auth type keyboard-interactive$
    ignore:.*imp:DeprecationWarning
    ignore:.*(notifyAll|setDaemon):DeprecationWarning
    ignore:.*coroutine:RuntimeWarning
    ignore::pytest.PytestCacheWarning
    ignore:.*invalid escape sequence.*:DeprecationWarning
    ignore:.*is deprecated and slated for removal.*:DeprecationWarning
    ignore:.*"is" with a literal.*:SyntaxWarning
    ignore::DeprecationWarning
    ignore:.*Unknown option directConnection.*:UserWarning
    ignore:.*TripleDES has been moved to.*


    

